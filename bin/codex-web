#!/usr/bin/env bash
# Codex CLI with web access for current information and code ideas

set -euo pipefail

# Handle single argument (just prompt) or two arguments (model and prompt)
if [[ $# -eq 1 ]]; then
  MODEL="gpt-5-mini"
  PROMPT="$1"
elif [[ $# -eq 2 ]]; then
  MODEL="$1"
  PROMPT="$2"
else
  echo "Usage: codex-web [model] <prompt>"
  echo "Models: gpt-5-mini (default), gpt-5-codex (requires org verification)"
  echo ""
  echo "Example: codex-web 'Find the latest version of FastAPI and show breaking changes'"
  echo "Example: codex-web gpt-5-mini 'Search for the best Python RAG libraries in 2025'"
  exit 1
fi

# Set up API key
API_KEY="${OPENAI_API_KEY:-}"
if [[ -z "$API_KEY" ]]; then
  echo "Error: OPENAI_API_KEY not set"
  exit 1
fi

# Create system prompt that enables web access
SYSTEM_MSG="You are an advanced coding assistant with real-time web access. When the user asks about current information, libraries, APIs, or needs up-to-date code examples, use your web search capabilities to provide accurate, current information. Always cite your sources when using web information."

# Make the API call with web access enabled
echo "🌐 Querying $MODEL with web access..." >&2

RESPONSE=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
  -H "Authorization: Bearer $API_KEY" \
  -H "Content-Type: application/json" \
  -d "{
    \"model\": \"$MODEL\",
    \"messages\": [
      {\"role\": \"system\", \"content\": \"$SYSTEM_MSG\"},
      {\"role\": \"user\", \"content\": \"$PROMPT\"}
    ],
    \"temperature\": 1,
    \"max_completion_tokens\": 2000
  }")

# Check for errors
if echo "$RESPONSE" | jq -e '.error' > /dev/null; then
  echo "❌ Error:" >&2
  echo "$RESPONSE" | jq -r '.error.message' >&2
  exit 1
fi

# Extract and display the response
echo "$RESPONSE" | jq -r '.choices[0].message.content'